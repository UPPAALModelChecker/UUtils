---
name: Build and Test

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  formatting:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Version of clang-format
        run: clang-format --version
      - name: Formatting
        run: find src include test -iregex '.*\.\(c\|h\|cpp\|hpp\|cc\|hh\|cxx\|hxx\)$' | xargs clang-format -n -Werror

  build-linux:
    runs-on: ubuntu-24.04
    env:
      TARGET: x86_64-linux
      CMAKE_GENERATOR: Ninja
      CMAKE_BUILD_TYPE: Debug
      CTEST_OUTPUT_ON_FAILURE: 1
      CTEST_TEST_TIMEOUT: 20
    steps:
      - uses: actions/checkout@v4
      - name: Install compiler tools
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install g++ cmake ninja-build
          CORES=$(nproc)
          echo "CMAKE_BUILD_PARALLEL_LEVEL=$CORES" >> $GITHUB_ENV
          echo "CTEST_PARALLEL_LEVEL=$CORES" >> $GITHUB_ENV
          echo "BUILD=build-${TARGET}-${CMAKE_BUILD_TYPE,,}" >> $GITHUB_ENV
      - name: Get Libs
        run: |
          CMAKE_BUILD_TYPE=Release ./getlibs.sh $TARGET
      - name: Configure
        run: cmake -S . -B "$BUILD" -DCMAKE_PREFIX_PATH="$PWD/local/${TARGET}" -DUBSAN=ON -DASAN=ON -DFIND_FATAL=ON
      - name: Compile
        run: cmake --build "$BUILD" --config $CMAKE_BUILD_TYPE
      - name: Test
        run: ctest --test-dir "$BUILD" -C $CMAKE_BUILD_TYPE

  build-mingw:
    runs-on: ubuntu-24.04
    env:
      TARGET: x86_64-w64-mingw32
      WINARCH: win64
      CMAKE_GENERATOR: Ninja
      CMAKE_BUILD_TYPE: Debug
      CMAKE_TOOLCHAIN_FILE: ${{ github.workspace }}/cmake/toolchain/x86_64-w64-mingw32.cmake
      CTEST_OUTPUT_ON_FAILURE: 1
      CTEST_TEST_TIMEOUT: 20
    steps:
      - uses: actions/checkout@v4
      - name: Install cross-compiler tools
        run: |
          sudo apt-get -qq update
          sudo apt-get -qq install cmake ninja-build g++-mingw-w64-x86-64 mingw-w64-x86-64-dev mingw-w64-tools wine wine-binfmt
          sudo update-alternatives --set ${TARGET}-gcc /usr/bin/${TARGET}-gcc-posix
          sudo update-alternatives --set ${TARGET}-g++ /usr/bin/${TARGET}-g++-posix
          WINEPATH=$(./winepath-for $TARGET)
          echo "WINEPATH=$WINEPATH" >> $GITHUB_ENV
          CORES=$(nproc)
          echo "CMAKE_BUILD_PARALLEL_LEVEL=$CORES" >> $GITHUB_ENV
          echo "CTEST_PARALLEL_LEVEL=$CORES" >> $GITHUB_ENV
          echo "BUILD=build-${TARGET}-${CMAKE_BUILD_TYPE,,}" >> $GITHUB_ENV
      - name: Get Libs
        run: |
          CMAKE_BUILD_TYPE=Release ./getlibs.sh $TARGET
      - name: Configure
        run: cmake -S . -B "$BUILD" -DCMAKE_PREFIX_PATH="$PWD/local/${TARGET}" -DFIND_FATAL=ON
      - name: Compile
        run: cmake --build "$BUILD" --config $CMAKE_BUILD_TYPE
      - name: Test
        run: ctest --test-dir "$BUILD" -C $CMAKE_BUILD_TYPE

  build-macos-x86_64:
    runs-on: macos-latest
    env:
      TARGET: x86_64-darwin
      CMAKE_GENERATOR: Ninja
      CMAKE_BUILD_TYPE: Debug
      CTEST_OUTPUT_ON_FAILURE: 1
      CTEST_TEST_TIMEOUT: 20
    steps:
      - uses: actions/checkout@v4
      - name: Install Ninja
        run: |
          brew install ninja
          CORES=$(sysctl -n hw.ncpu)
          echo "CMAKE_BUILD_PARALLEL_LEVEL=$CORES" >> $GITHUB_ENV
          echo "CTEST_PARALLEL_LEVEL=$CORES" >> $GITHUB_ENV
          echo "BUILD=build-${TARGET}-debug" >> $GITHUB_ENV
      - name: Get Libs
        run: |
          CMAKE_BUILD_TYPE=Release ./getlibs.sh $TARGET
      - name: Configure
        run: cmake -S . -B "$BUILD" -DCMAKE_TOOLCHAIN_FILE="cmake/toolchain/${TARGET}.cmake" -DCMAKE_PREFIX_PATH="$PWD/local/$TARGET" -DFIND_FATAL=ON
      - name: Compile
        run: cmake --build "$BUILD" --config $CMAKE_BUILD_TYPE
      - name: Test
        run: ctest --test-dir "$BUILD" -C $CMAKE_BUILD_TYPE

  build-macos-arm64:
    runs-on: macos-latest
    env:
      TARGET: arm64-darwin
      CMAKE_GENERATOR: Ninja
      CMAKE_BUILD_TYPE: Debug
      CTEST_OUTPUT_ON_FAILURE: 1
      CTEST_TEST_TIMEOUT: 20
    steps:
      - uses: actions/checkout@v4
      - name: Install Ninja
        run: |
          brew install ninja
          CORES=$(sysctl -n hw.ncpu)
          echo "CMAKE_BUILD_PARALLEL_LEVEL=$CORES" >> $GITHUB_ENV
          echo "CTEST_PARALLEL_LEVEL=$CORES" >> $GITHUB_ENV
          echo "BUILD=build-${TARGET}-debug" >> $GITHUB_ENV
      - name: Get Libs
        run: |
          CMAKE_BUILD_TYPE=Release ./getlibs.sh $TARGET
      - name: Configure
        run: cmake -S . -B "$BUILD" -DCMAKE_TOOLCHAIN_FILE="cmake/toolchain/${TARGET}.cmake" -DCMAKE_PREFIX_PATH="$PWD/local/$TARGET" -DFIND_FATAL=ON
      - name: Compile
        run: cmake --build "$BUILD" --config $CMAKE_BUILD_TYPE
      - name: Test
        run: ctest --test-dir "$BUILD" -C $CMAKE_BUILD_TYPE

  build-windows:
    runs-on: windows-latest
    env:
      TARGET: x86_64-windows
      CMAKE_TOOLCHAIN_FILE: C:/vcpkg/scripts/buildsystems/vcpkg.cmake
      CMAKE_BUILD_TYPE: Debug
      STATIC: ON
      CTEST_TEST_TIMEOUT: 20
      CTEST_OUTPUT_ON_FAILURE: 1
    steps:
      - uses: actions/checkout@v4
      - name: Setup
        run: |
          echo "BUILD=build-$env:TARGET-debug" >> $env:GITHUB_ENV
      - name: Get Libs
        run: |
          vcpkg integrate install
          vcpkg install doctest --triplet x64-windows
          pwsh -Command { $env:CMAKE_BUILD_TYPE='Release'; bash ./getlibs.sh x86_64-w64-mingw32 }
      - name: Connfigure
        run: cmake -S . -B $env:BUILD -DCMAKE_PREFIX_PATH=${{ github.workspace }}/local/x86_64-w64-mingw32
      - name: Compile
        run: cmake --build $env:BUILD --config $env:CMAKE_BUILD_TYPE
      - name: Test
        run: ctest --test-dir $env:BUILD -C $env:CMAKE_BUILD_TYPE
